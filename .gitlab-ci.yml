stages:
  - build
  - deploy

build:
  image: registry.gitlab.com/zubrapp/zubr-server:latest
  stage: build
  only:
    refs:
      - develop
      - master
  artifacts:
    paths:
      - bin/*
      - config/*
      - infrastructure/*
      - public/*
      - var/*
      - vendor/
      - composer.json
      - composer.lock
      - .env
      - .${CI_COMMIT_REF_NAME}.env
    expire_in: 30 sec
  before_script:
    - source .${CI_COMMIT_REF_NAME}.env
  script:
    - touch .env
    - printf $GOOGLE_CREDENTIALS >> config/credentials/google_credentials.json
    - printf "DATABASE_NAME=$DATABASE_NAME\n" >> .env
    - printf "DATABASE_USER=$DATABASE_USER\n" >> .env
    - printf "DATABASE_PASSWORD=$DATABASE_PASSWORD\n" >> .env
    - printf "DATABASE_HOST=$DATABASE_HOST\n" >> .env
    - printf "DATABASE_PORT=3306\n" >> .env
    - printf "SENTRY_DSN=$SENTRY_DSN\n" >> .env
    - printf "APP_ENV=$APP_ENV\n" >> .env
    - printf "BUCKET_MEMBERS=$BUCKET_MEMBERS\n" >> .env
    - printf "BUCKET_REPORTS=$BUCKET_REPORTS\n" >> .env
    - printf "APP_DEBUG=$APP_DEBUG\n" >> .env
    - printf "AWS_SECRET=$S3_SECRET\n" >> .env
    - printf "AWS_KEY=$S3_KEY\n" >> .env
    - printf "APP_SECRET=test\n" >> .env
    - printf "SHEET_ID=$SHEET_ID\n" >> .env
    - printf "UNSUBSCRIBE_SECRET=$UNSUBSCRIBE_SECRET\n" >> .env
    - echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env
    - printf "\n" >> .env
    - echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env
    - printf "\n" >> .env
    - printf "JWT_PASSPHRASE=$JWT_PASSPHRASE\n" >> .env
    - printf "CORS_ALLOW_ORIGIN=$CORS\n" >> .env
    - echo "$JWT_PRIVATE" >> config/jwt/private.pem
    - printf "\n" >> .env
    - echo "$JWT_PUBLIC" >> config/jwt/public.pem
    - printf "\n" >> .env
    - composer install -a --no-dev --no-interaction
    - printf "$DEPLOY_HOST\n" >> infrastructure/hosts

deploy:
  image: kissmy/ansistrano:latest
  stage: deploy
  dependencies:
    - build
  only:
    refs:
      - develop
      - master
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ansible-playbook -i infrastructure/hosts -u $DEPLOY_USER infrastructure/ansistrano_${CI_COMMIT_REF_NAME}_deploy.yml -v


