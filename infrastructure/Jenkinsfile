pipeline {
  agent any
  environment {
    COMPOSE_PROJECT_NAME = 'zubr_test'
  }
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Test') {
        environment {
            APP_ENV            = 'test'
            DATABASE_HOST      = 'database'
            DATABASE_USER      = 'test'
            DATABASE_PASSWORD  = 'test'
            DATABASE_NAME      = 'zubr_test'
            S3_SECRET          = credentials('API_S3_SECRET')
            S3_KEY             = credentials('API_S3_KEY')
            BUCKET_MEMBERS     = credentials('API_BUCKET_MEMBERS')
            BUCKET_REPORTS     = credentials('API_BUCKET_REPORTS')
            JWT_PASSPHRASE     = credentials('API_JWT_PASSPHRASE')
            UNSUBSCRIBE_SECRET = credentials('API_UNSUBSCRIBE_SECRET')
        }
        steps {
                    sh 'make compose-up-ci'
                    writeFile file: '.env', text: """
DATABASE_USER=${DATABASE_USER}
DATABASE_PASSWORD=${DATABASE_PASSWORD}
DATABASE_HOST=${DATABASE_HOST}
DATABASE_NAME=${DATABASE_NAME}
DATABASE_PORT=3306

CORS_ALLOW_ORIGIN=*
APP_ENV=${APP_ENV}
APP_DEBUG=false
AWS_SECRET=${S3_SECRET}
AWS_KEY=${S3_KEY}
BUCKET_MEMBERS=${BUCKET_MEMBERS}
BUCKET_REPORTS=${BUCKET_REPORTS}

JWT_PASSPHRASE=${JWT_PASSPHRASE}
UNSUBSCRIBE_SECRET=${UNSUBSCRIBE_SECRET}
SHEET_ID=1

JWT_SECRET_KEY=%kernel.project_dir%/private.pem
JWT_PUBLIC_KEY=%kernel.project_dir%/public.pem
GIT_COMMIT=${GIT_COMMIT}

        """
                    writeFile file: 'private.pem', text: """
$PRIVATE_KEY
        """
                    writeFile file: 'public.pem', text: """
$PUBLIC_KEY
        """
                    sh 'bin/console database:init'
                    sh 'vendor/bin/phpunit'
        }

    }
    stage('Build') {
        environment {
            APP_ENV            = 'prod'
            DATABASE_HOST      = credentials('API_DATABASE_HOST')
            DATABASE_USER      = credentials('API_DATABASE_USER')
            DATABASE_PASSWORD  = credentials('API_DATABASE_PASSWORD')
            DATABASE_NAME      = credentials('API_DATABASE_NAME')
            SENTRY_DSN         = credentials('API_SENTRY_DSN')
            S3_SECRET          = credentials('API_S3_SECRET')
            S3_KEY             = credentials('API_S3_KEY')
            BUCKET_MEMBERS     = credentials('API_BUCKET_MEMBERS')
            BUCKET_REPORTS     = credentials('API_BUCKET_REPORTS')
            JWT_PASSPHRASE     = credentials('API_JWT_PASSPHRASE')
            UNSUBSCRIBE_SECRET = credentials('API_UNSUBSCRIBE_SECRET')
        }
        agent {
            dockerfile {
                filename 'infrastructure/php/gitlab/Dockerfile'

            }

        }
        steps {
            writeFile file: '.env', text: """
DATABASE_USER=${DATABASE_USER}
DATABASE_PASSWORD=${DATABASE_PASSWORD}
DATABASE_HOST=${DATABASE_HOST}
DATABASE_NAME=${DATABASE_NAME}
DATABASE_PORT=3306

CORS_ALLOW_ORIGIN=*
SENTRY_DSN=${SENTRY_DSN}
APP_ENV=${APP_ENV}
APP_DEBUG=false
AWS_SECRET=${S3_SECRET}
AWS_KEY=${S3_KEY}
BUCKET_MEMBERS=${BUCKET_MEMBERS}
BUCKET_REPORTS=${BUCKET_REPORTS}

JWT_PASSPHRASE=${JWT_PASSPHRASE}
UNSUBSCRIBE_SECRET=${UNSUBSCRIBE_SECRET}
SHEET_ID=1

JWT_SECRET_KEY=%kernel.project_dir%/private.pem
JWT_PUBLIC_KEY=%kernel.project_dir%/public.pem
GIT_COMMIT=${GIT_COMMIT}

"""
            writeFile file: 'private.pem', text: """
$PRIVATE_KEY
"""
            writeFile file: 'public.pem', text: """
$PUBLIC_KEY
"""
            sh 'printf "{}" >> config/credentials/google_credentials.json'
            sh 'composer install -a --no-dev --no-interaction'

            stash includes: 'config/**', name: 'config'
            stash includes: 'vendor/**', name: 'vendor'
            stash includes: 'infrastructure/ansistrano_master_deploy.yml', name: 'infra'
            stash includes: 'src/**', name: 'src'
            stash includes: 'public/**', name: 'public'

            stash includes: 'templates/**', name: 'templates'
            stash includes: 'var/**', name: 'var'
            stash includes: 'bin/**', name: 'bin'
            stash includes: '.env', name: 'env'
            stash includes: '*.pem', name: 'keys'
        }
    }
    stage('Deploy') {
        environment {
             BACKEND_HOST   = credentials('API_BACKEND_HOST')
             FRONTEND_HOST  = credentials('FRONTEND_HOST')
             API_HOST_1     = credentials('API_HOST_1')
        }
        steps {
            unstash 'vendor'
            unstash 'infra'
            unstash 'src'
            unstash 'public'
            unstash 'config'
            unstash 'templates'
            unstash 'var'
            unstash 'bin'
            unstash 'env'
            unstash 'keys'
            writeFile file: 'hosts', text: """
$FRONTEND_HOST
$BACKEND_HOST
$API_HOST_1
[data]
$BACKEND_HOST
            """
//             ansiblePlaybook(
//                   playbook: 'infrastructure/ansistrano_master_deploy.yml',
//                   inventory: "hosts",
//                   credentialsId: "SSH_PRIVATE_KEY",
//                   hostKeyChecking: false
//             )
        }
    }
  }
  post {
    always {
      sh 'make compose-ci-down'
      cleanWs()
    }
  }
}

